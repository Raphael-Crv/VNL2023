# This file generated by Quarto; do not edit by hand.
# shiny_mode: core

from __future__ import annotations

from pathlib import Path
from shiny import App, Inputs, Outputs, Session, ui

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
from shiny import reactive
from shiny.express import render, ui


# Load data
PlayersStats = pd.read_csv("VNL2023.csv")

# ========================================================================




def server(input: Inputs, output: Outputs, session: Session) -> None:
    ui.input_select(
        "stat_choice", 
        "Choose a statistic:",
        {
            "Attack": "Attack points per match",
            "Block": "Block points per match",
            "Serve": "Service points per match",
            "Set": "Number of scoring sets per match",
            "Dig": "Digs per match",
            "Receive": "Receptions per match"
        },
        selected="Attack"
    )

    @reactive.calc
    def top_players():
        stat = input.stat_choice()
        data = PlayersStats[["Player", "Country", stat]].sort_values(by=stat, ascending=False)
        return data.head(10)

    # ========================================================================

    @render.data_frame
    def player_table():
        return top_players()

    # ========================================================================

    @render.plot
    def stat_histogram():
        stat = input.stat_choice()
        data = PlayersStats[stat]

        plt.figure(figsize=(10, 6))
        sns.histplot(data, bins=20, kde=False, palette="viridis", edgecolor="black")
        plt.title(f"Distribution of {stat}s per match", fontsize=16)
        plt.xlabel(f"{stat}s", fontsize=14)
        plt.ylabel("Number of Players", fontsize=14)
        plt.xticks(fontsize=12)
        plt.yticks(fontsize=12)
        plt.grid(axis='y', linestyle='--', alpha=0.5)
        plt.tight_layout()

    # ========================================================================

    ui.input_select(
        "team_choice", 
        "Choose a country:",
        {
            "Argentina": "Argentina", "Brazil": "Brazil", "Bulgaria": "Bulgaria",
            "Canada": "Canada", "China": "China", "Cuba": "Cuba", "France": "France",
            "Germany": "Germany", "Iran": "Iran", "Italy": "Italy", "Japan": "Japan",
            "Nederland": "Nederland", "Poland": "Poland", "Serbia": "Serbia",
            "Slovenia": "Slovenia", "USA": "USA"
        },
        selected="France"
    )

    @reactive.calc
    def team_data():
        team = input.team_choice()
        data = PlayersStats[PlayersStats["Country"] == team].copy()
        data["Total points per match"] = data["Attack"] + data["Block"] + data["Serve"]
        data["Total defenses per match"] = data["Receive"] + data["Dig"]
        return data

    # ========================================================================

    @render.plot
    def team_stats_hist():

        data = team_data()
        stats = ["Attack", "Block", "Serve", "Dig", "Receive"]
        totals = [data[col].sum() for col in stats]

        plt.figure(figsize=(10, 6))
        plt.bar(stats, totals, color=plt.cm.viridis([0.2, 0.4, 0.6, 0.8, 1]), edgecolor="black")
        plt.title(f"Total Stats for Team {input.team_choice()} per match", fontsize=16)
        plt.ylabel("Total (Sum over all players)", fontsize=14)
        plt.xticks(fontsize=12)
        plt.yticks(fontsize=12)
        plt.grid(axis='y', linestyle='--', alpha=0.5)
        plt.tight_layout()

    # ========================================================================

    @render.data_frame
    def team_top_scorers():
        data = team_data()[["Player", "Attack", "Block", "Serve", "Total points per match"]]
        return data.sort_values(by="Total points per match", ascending=False).head(10).round(2)

    # ========================================================================

    @render.data_frame
    def team_top_defenders():
        data = team_data().copy()
        return data[["Player", "Receive", "Dig", "Total defenses per match"]].sort_values(
            by="Total defenses per match", ascending=False
        ).head(10).round(2)

    # ========================================================================



    return None


_static_assets = ["Dashboard_files","Dashboard_files\\libs\\quarto-html\\tippy.css","Dashboard_files\\libs\\quarto-html\\quarto-syntax-highlighting-dark-a5cd134f9b40a21b85be3e62cd27a8fe.css","Dashboard_files\\libs\\quarto-html\\quarto-syntax-highlighting-7b4406b7675125bc2ba204020e191172.css","Dashboard_files\\libs\\bootstrap\\bootstrap-icons.css","Dashboard_files\\libs\\bootstrap\\bootstrap-dark-5541884affe7b4a4e07fa92b3ba219ba.min.css","Dashboard_files\\libs\\bootstrap\\bootstrap-5541884affe7b4a4e07fa92b3ba219ba.min.css","Dashboard_files\\libs\\quarto-dashboard\\datatables.min.css","Dashboard_files\\libs\\clipboard\\clipboard.min.js","Dashboard_files\\libs\\quarto-html\\quarto.js","Dashboard_files\\libs\\quarto-html\\tabsets\\tabsets.js","Dashboard_files\\libs\\quarto-html\\popper.min.js","Dashboard_files\\libs\\quarto-html\\tippy.umd.min.js","Dashboard_files\\libs\\quarto-html\\anchor.min.js","Dashboard_files\\libs\\bootstrap\\bootstrap.min.js","Dashboard_files\\libs\\quarto-dashboard\\quarto-dashboard.js","Dashboard_files\\libs\\quarto-dashboard\\stickythead.js","Dashboard_files\\libs\\quarto-dashboard\\datatables.min.js","Dashboard_files\\libs\\quarto-dashboard\\pdfmake.min.js","Dashboard_files\\libs\\quarto-dashboard\\vfs_fonts.js","Dashboard_files\\libs\\quarto-dashboard\\web-components.js","Dashboard_files\\libs\\quarto-dashboard\\components.js"]
_static_assets = {"/" + sa: Path(__file__).parent / sa for sa in _static_assets}

app = App(
    Path(__file__).parent / "Dashboard.html",
    server,
    static_assets=_static_assets,
)
