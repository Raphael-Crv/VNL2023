---
title: "VNL2023"
author: "Raphael Cerveau"
format: dashboard
server: shiny
---

```{python}
#| context: setup
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
from shiny import reactive
from shiny.express import render, ui


# Load data
PlayersStats = pd.read_csv("VNL2023.csv")
```

# Individual Statistics {.sidebar-section}

## Sidebar {.sidebar}

### Select Statistics
```{python}
ui.input_select(
    "stat_choice", 
    "Choose a statistic:",
    {
        "Attack": "Attack points per match",
        "Block": "Block points per match",
        "Serve": "Service points per match",
        "Set": "Number of scoring sets per match",
        "Dig": "Digs per match",
        "Receive": "Receptions per match"
    },
    selected="Attack"
)

@reactive.calc
def top_players():
    stat = input.stat_choice()
    data = PlayersStats[["Player", "Country", stat]].sort_values(by=stat, ascending=False)
    return data.head(10)

```

## Content {.tabset}

### Top Players Ranking
```{python}
@render.data_frame
def player_table():
    return top_players()
```

### Distribution of this Statistic
```{python}
@render.plot
def stat_histogram():
    stat = input.stat_choice()
    data = PlayersStats[stat]

    plt.figure(figsize=(10, 6))
    sns.histplot(data, bins=20, kde=False, palette="viridis", edgecolor="black")
    plt.title(f"Distribution of {stat}s per match", fontsize=16)
    plt.xlabel(f"{stat}s", fontsize=14)
    plt.ylabel("Number of Players", fontsize=14)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    plt.tight_layout()
```

    
  

# Team Statistics

## Sidebar {.sidebar}

### Select Country
```{python}
ui.input_select(
    "team_choice", 
    "Choose a country:",
    {
        "Argentina": "Argentina", "Brazil": "Brazil", "Bulgaria": "Bulgaria",
        "Canada": "Canada", "China": "China", "Cuba": "Cuba", "France": "France",
        "Germany": "Germany", "Iran": "Iran", "Italy": "Italy", "Japan": "Japan",
        "Nederland": "Nederland", "Poland": "Poland", "Serbia": "Serbia",
        "Slovenia": "Slovenia", "USA": "USA"
    },
    selected="France"
)

@reactive.calc
def team_data():
    team = input.team_choice()
    data = PlayersStats[PlayersStats["Country"] == team].copy()
    data["Total points per match"] = data["Attack"] + data["Block"] + data["Serve"]
    data["Total defenses per match"] = data["Receive"] + data["Dig"]
    return data
```
## Content {.tabset}

### Statistics of the Team
```{python}
@render.plot
def team_stats_hist():

    data = team_data()
    stats = ["Attack", "Block", "Serve", "Dig", "Receive"]
    totals = [data[col].sum() for col in stats]

    plt.figure(figsize=(10, 6))
    plt.bar(stats, totals, color=plt.cm.viridis([0.2, 0.4, 0.6, 0.8, 1]), edgecolor="black")
    plt.title(f"Total Stats for Team {input.team_choice()} per match", fontsize=16)
    plt.ylabel("Total (Sum over all players)", fontsize=14)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    plt.tight_layout()
```

### Top performances in the team {.tabset}

#### Top Scorers

```{python}
@render.data_frame
def team_top_scorers():
    data = team_data()[["Player", "Attack", "Block", "Serve", "Total points per match"]]
    return data.sort_values(by="Total points per match", ascending=False).head(10).round(2)
```

#### Top Defenders
```{python}
@render.data_frame
def team_top_defenders():
    data = team_data().copy()
    return data[["Player", "Receive", "Dig", "Total defenses per match"]].sort_values(
        by="Total defenses per match", ascending=False
    ).head(10).round(2)
```
